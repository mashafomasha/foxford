{"version":3,"sources":["store/actions/employees.ts","store/reducers/employees.ts","store/reducers/index.ts","api/employees.ts","api/hosts.ts","store/sagas/employees.ts","store/index.ts","components/Page/constants.tsx","store/selectors/employees.ts","components/Page/index.tsx","components/App/index.tsx","index.tsx"],"names":["fetchEmployees","createAction","toggleLoading","toggleError","setData","employeesReducer","createReducer","loading","error","order","itemById","handleAction","state","payload","results","map","login","uuid","reduce","acc","employee","name","first","surname","last","id","age","dob","rootReducer","combineReducers","employees","getEmployees","a","ky","get","json","parsed","fetch","employeesSaga","action","put","call","data","takeLatest","columns","title","dataIndex","employeesSelector","employeesByIdSelector","createSelector","employeesOrderSelector","employeesLoadingSelector","employeesErrorSelector","getCheckboxProps","record","mapStateToProps","createStructuredSelector","key","mapDispatchToProps","getData","Page","connect","React","selected","setSelected","onChange","_","selectedRows","renderSummary","join","className","status","subTitle","extra","onClick","dataSource","rowSelection","type","footer","pagination","scroll","x","y","store","sagaMiddleware","createSagaMiddleware","composeEnhancers","composeWithDevTools","resultStore","createStore","applyMiddleware","run","configureStore","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAGaA,EAAiBC,uBAAa,2BAAbA,GAEjBC,EAAgBD,uBAAa,0BAAbA,GAEhBE,EAAcF,uBAAa,wBAAbA,GAEdG,EAAUH,uBAAa,oBAAbA,GCEVI,EAAmBC,wBAPK,CACjCC,SAAS,EACTC,OAAO,EACPC,MAAO,GACPC,SAAU,KAITC,aAAaT,GAAe,SAACU,EAAD,OAAmBL,EAAnB,EAAUM,QAAV,sBACtBD,EADsB,CAEzBL,eAEHI,aAAaR,GAAa,SAACS,EAAD,OAAmBJ,EAAnB,EAAUK,QAAV,sBACpBD,EADoB,CAEvBJ,aAEHG,aAAaP,GAAS,SAACQ,EAAD,OAAqBE,EAArB,EAAUD,QAAWC,QAArB,sBAChBF,EADgB,CAEnBH,MAAOK,EAAQC,KAAI,qBAAGC,MAASC,QAC/BP,SAAUI,EAAQI,QAAO,SAACC,EAAKC,GAAc,IAAD,EAKpCA,EAHAC,KAAeA,EAFqB,EAE5BC,MAAmBC,EAFS,EAEfC,KACNC,EAEfL,EAFAJ,MAASC,KACFS,EACPN,EADAO,IAAOD,IAUX,OAPAP,EAAIM,GAAM,CACNJ,OACAE,UACAE,KACAC,OAGGP,IACR,SChCES,EAAcC,0BAAuB,CAC9CC,UAAWzB,I,0CCWF0B,EAAY,uCAAG,4BAAAC,EAAA,sEACiBC,IACpCC,IADoC,UCnBd,4BDmBc,mCAEpCC,OAHmB,cAClBC,EADkB,yBAKjBA,GALiB,2CAAH,qD,WERfC,G,WAeOC,GAfjB,SAAUD,EAAME,GAAhB,uEAEQ,OAFR,kBAEcC,YAAIrC,GAAY,IAF9B,OAGQ,OAHR,SAGcqC,YAAItC,GAAc,IAHhC,OAKyC,OALzC,SAK+CuC,YAAKV,GALpD,OAMQ,OADMW,EALd,iBAMcF,YAAIpC,EAAQsC,IAN1B,QAQQ,OARR,UAQcF,YAAItC,GAAc,IARhC,gCAUQ,OAVR,oCAUcsC,YAAItC,GAAc,IAVhC,QAWQ,OAXR,UAWcsC,YAAIrC,GAAY,IAX9B,sDAeO,SAAUmC,IAAV,iEACH,OADG,SACGK,YAAW3C,EAAgBqC,GAD9B,uCChBA,I,mDCTMO,EAAU,CACnB,CACIC,MAAO,qBACPC,UAAW,QAEf,CACID,MAAO,6CACPC,UAAW,WAEf,CACID,MAAO,6CACPC,UAAW,QCRNC,EAAoB,SAAC,GAAD,SAAGjB,WAEvBkB,EAAwBC,YACjCF,GACA,qBAAGrC,YAGMwC,EAAyBD,YAClCF,GACA,qBAAGtC,SAGM0C,EAA2BF,YACpCF,GACA,qBAAGxC,WAGM6C,EAAyBH,YAClCF,GACA,qBAAGvC,SCKD6C,EAAmB,SAACC,GAAD,MAAuB,CAC5CjC,KAAMiC,EAAOjC,OA4DXkC,EAAkBC,YAAgD,CACpEd,KAAMO,YACFC,EACAF,GACA,SAACvC,EAAOM,GAAR,OACIN,EAAMM,KAAI,SAACU,GAKP,OAJoB,eACbV,EAAIU,GADS,CAEhBgC,IAAKhC,UAKrBlB,QAAS4C,EACT3C,MAAO4C,IAELM,EAAqB,CACvBC,QAAS3D,GAGA4D,EAAOC,YAAQN,EAAiBG,EAAzBG,EA7EE,SAAC,GAAkD,IAAhDnB,EAA+C,EAA/CA,KAAMnC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,MAAOmD,EAAyB,EAAzBA,QAAyB,EACpCG,WAA2B,IADS,mBAC7DC,EAD6D,KACnDC,EADmD,KAGpEF,aAAgB,WACZH,MACD,CAACA,IAEJ,IAAMM,EAAWH,eACb,SAACI,EAAkBC,GACfH,EAAYG,KAEhB,CAACH,IAGCI,EAAgBN,eAClB,iBACI,8EACCC,EAAShD,KAAI,qBAAGM,QAAiBgD,KAAK,OAAS,+BACpD,CAACN,IAGL,OACI,wBAAMO,UAAU,QACZ,gBAAC,IAAD,CAAYA,UAAU,eAAezB,MAAM,4GAE3C,2BAASyB,UAAU,eACd9D,GACG,gBAAC,IAAD,CACI+D,OAAO,QACP1B,MAAM,gOACN2B,SAAS,6PACTC,MAAO,CACH,gBAAC,IAAD,CAAQhB,IAAI,QAAQiB,QAASf,GAA7B,+GAOZ,gBAAC,IAAD,CACIgB,WAAYjC,EACZE,QAASA,EACTgC,aAAc,CACVC,KAAM,WACNZ,WACAZ,oBAEJyB,OAAQV,EACR7D,QAASA,EACTwE,YAAY,EACZC,OAAQ,CAAEC,EAAG,IAAKC,EAAG,YC5EnCC,EJMwB,WAC1B,IAAMC,EAAiBC,cACjBC,EAAmBC,8BAAoB,IAEvCC,EAAcC,sBAChB7D,EACA0D,EAAiBI,0BAAgBN,KAOrC,OAJAA,EAAeO,IAAIrD,GAEXkD,EAEDA,EInBGI,GAEDC,EAAM,kBACf,gBAAC,IAAD,CAAUV,MAAOA,GACb,gBAACvB,EAAD,Q,cCFRkC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.8e3a3920.chunk.js","sourcesContent":["import { createAction } from 'typesafe-actions';\nimport { GetEmployeesResult } from 'api/employees';\n\nexport const fetchEmployees = createAction('employees/fetchEmployees')();\n\nexport const toggleLoading = createAction('employees/toggleLoading')<boolean>();\n\nexport const toggleError = createAction('employees/toggleError')<boolean>();\n\nexport const setData = createAction('employees/setData')<GetEmployeesResult>();\n","import { createReducer } from 'typesafe-actions';\nimport { EmployeesState } from 'store/state/employees';\nimport { toggleLoading, toggleError, setData } from 'store/actions/employees';\n\nconst initialState: EmployeesState = {\n    loading: false,\n    error: false,\n    order: [],\n    itemById: {},\n};\n\nexport const employeesReducer = createReducer(initialState)\n    .handleAction(toggleLoading, (state, { payload: loading }) => ({\n        ...state,\n        loading,\n    }))\n    .handleAction(toggleError, (state, { payload: error }) => ({\n        ...state,\n        error,\n    }))\n    .handleAction(setData, (state, { payload: { results } }) => ({\n        ...state,\n        order: results.map(({ login: { uuid: id } }) => id),\n        itemById: results.reduce((acc, employee) => {\n            const {\n                name: { first: name, last: surname },\n                login: { uuid: id },\n                dob: { age },\n            } = employee;\n\n            acc[id] = {\n                name,\n                surname,\n                id,\n                age,\n            };\n\n            return acc;\n        }, {} as EmployeesState['itemById']),\n    }));\n","import { combineReducers } from 'redux';\nimport { StateType } from 'typesafe-actions';\n\nimport { State } from 'store/state';\nimport { employeesReducer } from './employees';\n\nexport const rootReducer = combineReducers<State>({\n    employees: employeesReducer,\n});\n\nexport type RootState = StateType<typeof rootReducer>;\n","import ky from 'ky';\nimport { employeesApiURL } from './hosts';\n\nexport type GetEmployeesResult = {\n    results: {\n        dob: {\n            age: number;\n        };\n        name: {\n            first: string;\n            last: string;\n        };\n        login: {\n            uuid: string;\n        };\n    }[];\n};\n\nexport const getEmployees = async () => {\n    const parsed: GetEmployeesResult = await ky\n        .get(`${employeesApiURL}?inc=dob,name,login&results=50`)\n        .json();\n\n    return parsed;\n};\n","export const employeesApiURL = 'https://randomuser.me/api';\n","import { call, put, takeLatest } from 'redux-saga/effects';\nimport { getEmployees, GetEmployeesResult } from 'api/employees';\n\nimport {\n    fetchEmployees,\n    toggleLoading,\n    toggleError,\n    setData,\n} from 'store/actions/employees';\n\nfunction* fetch(action: ReturnType<typeof fetchEmployees>) {\n    try {\n        yield put(toggleError(false));\n        yield put(toggleLoading(true));\n\n        const data: GetEmployeesResult = yield call(getEmployees);\n        yield put(setData(data));\n\n        yield put(toggleLoading(false));\n    } catch (e) {\n        yield put(toggleLoading(false));\n        yield put(toggleError(true));\n    }\n}\n\nexport function* employeesSaga() {\n    yield takeLatest(fetchEmployees, fetch);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnly';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { rootReducer } from './reducers';\nimport { employeesSaga } from './sagas/employees';\n\nlet store: ReturnType<typeof configureStore> | undefined;\n\nexport const getStore = () => store;\n\nexport const configureStore = () => {\n    const sagaMiddleware = createSagaMiddleware();\n    const composeEnhancers = composeWithDevTools({});\n\n    const resultStore = createStore(\n        rootReducer,\n        composeEnhancers(applyMiddleware(sagaMiddleware)),\n    );\n\n    sagaMiddleware.run(employeesSaga);\n\n    store = resultStore;\n\n    return resultStore;\n};\n","export const columns = [\n    {\n        title: 'Имя',\n        dataIndex: 'name',\n    },\n    {\n        title: 'Фамилия',\n        dataIndex: 'surname',\n    },\n    {\n        title: 'Возраст',\n        dataIndex: 'age',\n    },\n];\n","import { createSelector } from 'reselect';\nimport { State } from 'store/state';\n\nexport const employeesSelector = ({ employees }: State) => employees;\n\nexport const employeesByIdSelector = createSelector(\n    employeesSelector,\n    ({ itemById }) => itemById,\n);\n\nexport const employeesOrderSelector = createSelector(\n    employeesSelector,\n    ({ order }) => order,\n);\n\nexport const employeesLoadingSelector = createSelector(\n    employeesSelector,\n    ({ loading }) => loading,\n);\n\nexport const employeesErrorSelector = createSelector(\n    employeesSelector,\n    ({ error }) => error,\n);\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector, createStructuredSelector } from 'reselect';\nimport { PageHeader, Table, Result, Button } from 'antd';\n\nimport { Employee } from 'types/employee';\nimport { columns } from './constants';\nimport { State } from 'store/state';\nimport {\n    employeesOrderSelector,\n    employeesByIdSelector,\n    employeesLoadingSelector,\n    employeesErrorSelector,\n} from 'store/selectors/employees';\nimport { fetchEmployees } from 'store/actions/employees';\n\ntype TableRow = Omit<Employee, 'id'> & { key: string };\ntype TableRowKey = number | string;\n\ntype PageStateProps = {\n    data: TableRow[];\n    loading: boolean;\n    error: boolean;\n};\ntype PageDispatchProps = typeof mapDispatchToProps;\ntype PageProps = PageStateProps & PageDispatchProps;\n\nconst getCheckboxProps = (record: TableRow) => ({\n    name: record.name,\n});\n\nconst PageComponent = ({ data, loading, error, getData }: PageProps) => {\n    const [selected, setSelected] = React.useState<TableRow[]>([]);\n\n    React.useEffect(() => {\n        getData();\n    }, [getData]);\n\n    const onChange = React.useCallback(\n        (_: TableRowKey[], selectedRows: TableRow[]) => {\n            setSelected(selectedRows);\n        },\n        [setSelected],\n    );\n\n    const renderSummary = React.useCallback(\n        () =>\n            'Пользователи: ' +\n            (selected.map(({ name }) => name).join(', ') || '≧☉_☉≦'),\n        [selected],\n    );\n\n    return (\n        <main className=\"page\">\n            <PageHeader className=\"page__header\" title=\"Список сотрудников\" />\n\n            <section className=\"page__table\">\n                {error && (\n                    <Result\n                        status=\"error\"\n                        title=\"Мы не смогли загрузить список сотрудников\"\n                        subTitle=\"Пожалуйста проверьте своё интернет-соединение\"\n                        extra={[\n                            <Button key=\"retry\" onClick={getData}>\n                                Попробовать ещё раз\n                            </Button>,\n                        ]}\n                    ></Result>\n                )}\n\n                <Table\n                    dataSource={data}\n                    columns={columns}\n                    rowSelection={{\n                        type: 'checkbox',\n                        onChange,\n                        getCheckboxProps,\n                    }}\n                    footer={renderSummary}\n                    loading={loading}\n                    pagination={false}\n                    scroll={{ x: 400, y: 600 }}\n                />\n            </section>\n        </main>\n    );\n};\n\nconst mapStateToProps = createStructuredSelector<State, PageStateProps>({\n    data: createSelector(\n        employeesOrderSelector,\n        employeesByIdSelector,\n        (order, map) =>\n            order.map((id) => {\n                const item: TableRow = {\n                    ...map[id],\n                    key: id,\n                };\n                return item;\n            }),\n    ),\n    loading: employeesLoadingSelector,\n    error: employeesErrorSelector,\n});\nconst mapDispatchToProps = {\n    getData: fetchEmployees,\n};\n\nexport const Page = connect(mapStateToProps, mapDispatchToProps)(PageComponent);\n","import * as React from 'react';\nimport { Provider } from 'react-redux';\nimport { configureStore } from 'store/index';\nimport { Page } from '../Page';\n\nconst store = configureStore();\n\nexport const App = () => (\n    <Provider store={store}>\n        <Page />\n    </Provider>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './components';\nimport 'antd/dist/antd.css';\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}