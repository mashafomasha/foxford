{"version":3,"sources":["store/actions/employees.ts","store/reducers/employees.ts","store/reducers/index.ts","api/employees.ts","api/hosts.ts","store/sagas/employees.ts","store/index.ts","store/selectors/employees.ts","components/Table/columns.tsx","components/Table/components/BaseCell/index.tsx","components/Table/components/BaseRow/index.tsx","components/Table/components/HeaderRow/index.tsx","components/Table/components/TableRow/index.tsx","components/Table/components/SummaryRow/index.tsx","components/Table/index.tsx","components/Page/index.tsx","components/App/index.tsx","index.tsx"],"names":["fetchEmployees","createAction","toggleLoading","toggleError","setData","employeesReducer","createReducer","loading","error","order","itemById","handleAction","state","payload","results","map","login","uuid","reduce","acc","employee","name","first","surname","last","id","age","dob","rootReducer","combineReducers","employees","getEmployees","a","ky","get","json","parsed","fetch","employeesSaga","action","put","call","data","takeLatest","employeesSelector","employeesByIdSelector","createSelector","employeesOrderSelector","employeesLoadingSelector","employeesErrorSelector","columns","title","dataIndex","BaseCell","React","children","className","tdProps","cn","BaseRow","trProps","HeaderRow","columnsOrder","indetermined","checked","indeterminate","data-row-id","key","scope","mapStateToProps","createStructuredSelector","rowData","_","rowId","dataById","TableRow","connect","table__row_selected","selectedNames","selected","filter","Boolean","SummaryRow","colSpan","join","rowsOrder","Table","setSelected","handleClickEvery","length","handleClickRow","idx","indexOf","without","splice","onClick","event","target","tagName","dataset","includes","Text","Typography","mapDispatchToProps","getData","Page","status","subTitle","extra","type","store","sagaMiddleware","createSagaMiddleware","composeEnhancers","composeWithDevTools","resultStore","createStore","applyMiddleware","run","configureStore","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4640a9ec.chunk.js","sourcesContent":["import { createAction } from 'typesafe-actions';\nimport { GetEmployeesResult } from 'api/employees';\n\nexport const fetchEmployees = createAction('employees/fetchEmployees')();\n\nexport const toggleLoading = createAction('employees/toggleLoading')<boolean>();\n\nexport const toggleError = createAction('employees/toggleError')<boolean>();\n\nexport const setData = createAction('employees/setData')<GetEmployeesResult>();\n","import { createReducer } from 'typesafe-actions';\nimport { EmployeesState } from 'store/state/employees';\nimport { toggleLoading, toggleError, setData } from 'store/actions/employees';\n\nconst initialState: EmployeesState = {\n    loading: false,\n    error: false,\n    order: [],\n    itemById: {},\n};\n\nexport const employeesReducer = createReducer(initialState)\n    .handleAction(toggleLoading, (state, { payload: loading }) => ({\n        ...state,\n        loading,\n    }))\n    .handleAction(toggleError, (state, { payload: error }) => ({\n        ...state,\n        error,\n    }))\n    .handleAction(setData, (state, { payload: { results } }) => ({\n        ...state,\n        order: results.map(({ login: { uuid: id } }) => id),\n        itemById: results.reduce((acc, employee) => {\n            const {\n                name: { first: name, last: surname },\n                login: { uuid: id },\n                dob: { age },\n            } = employee;\n\n            acc[id] = {\n                name,\n                surname,\n                id,\n                age,\n            };\n\n            return acc;\n        }, {} as EmployeesState['itemById']),\n    }));\n","import { combineReducers } from 'redux';\nimport { StateType } from 'typesafe-actions';\n\nimport { State } from 'store/state';\nimport { employeesReducer } from './employees';\n\nexport const rootReducer = combineReducers<State>({\n    employees: employeesReducer,\n});\n\nexport type RootState = StateType<typeof rootReducer>;\n","import ky from 'ky';\nimport { employeesApiURL } from './hosts';\n\nexport type GetEmployeesResult = {\n    results: {\n        dob: {\n            age: number;\n        };\n        name: {\n            first: string;\n            last: string;\n        };\n        login: {\n            uuid: string;\n        };\n    }[];\n};\n\nexport const getEmployees = async () => {\n    const parsed: GetEmployeesResult = await ky\n        .get(`${employeesApiURL}?inc=dob,name,login&results=50`)\n        .json();\n\n    return parsed;\n};\n","export const employeesApiURL = 'https://randomuser.me/api';\n","import { call, put, takeLatest } from 'redux-saga/effects';\nimport { getEmployees, GetEmployeesResult } from 'api/employees';\n\nimport {\n    fetchEmployees,\n    toggleLoading,\n    toggleError,\n    setData,\n} from 'store/actions/employees';\n\nfunction* fetch(action: ReturnType<typeof fetchEmployees>) {\n    try {\n        yield put(toggleError(false));\n        yield put(toggleLoading(true));\n\n        const data: GetEmployeesResult = yield call(getEmployees);\n        yield put(setData(data));\n\n        yield put(toggleLoading(false));\n    } catch (e) {\n        yield put(toggleLoading(false));\n        yield put(toggleError(true));\n    }\n}\n\nexport function* employeesSaga() {\n    yield takeLatest(fetchEmployees, fetch);\n}\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension/logOnly';\nimport createSagaMiddleware from 'redux-saga';\n\nimport { rootReducer } from './reducers';\nimport { employeesSaga } from './sagas/employees';\n\nlet store: ReturnType<typeof configureStore> | undefined;\n\nexport const getStore = () => store;\n\nexport const configureStore = () => {\n    const sagaMiddleware = createSagaMiddleware();\n    const composeEnhancers = composeWithDevTools({});\n\n    const resultStore = createStore(\n        rootReducer,\n        composeEnhancers(applyMiddleware(sagaMiddleware)),\n    );\n\n    sagaMiddleware.run(employeesSaga);\n\n    store = resultStore;\n\n    return resultStore;\n};\n","import { createSelector } from 'reselect';\nimport { State } from 'store/state';\n\nexport const employeesSelector = ({ employees }: State) => employees;\n\nexport const employeesByIdSelector = createSelector(\n    employeesSelector,\n    ({ itemById }) => itemById,\n);\n\nexport const employeesOrderSelector = createSelector(\n    employeesSelector,\n    ({ order }) => order,\n);\n\nexport const employeesLoadingSelector = createSelector(\n    employeesSelector,\n    ({ loading }) => loading,\n);\n\nexport const employeesErrorSelector = createSelector(\n    employeesSelector,\n    ({ error }) => error,\n);\n","export type TableColumnType = 'name' | 'surname' | 'age';\n\nexport type TableColumn = {\n    title: string;\n    dataIndex: TableColumnType;\n};\n\nexport const columns: TableColumn[] = [\n    {\n        title: 'Имя',\n        dataIndex: 'name',\n    },\n    {\n        title: 'Фамилия',\n        dataIndex: 'surname',\n    },\n    {\n        title: 'Возраст',\n        dataIndex: 'age',\n    },\n];\n","import * as React from 'react';\nimport cn from 'classnames';\n\ntype BaseCellProps = React.DetailedHTMLProps<\n    React.TdHTMLAttributes<HTMLTableDataCellElement>,\n    HTMLTableDataCellElement\n> & {\n    children: React.ReactNode;\n    className?: string;\n};\n\nexport const BaseCell = React.memo(\n    ({ children, className, ...tdProps }: BaseCellProps) => (\n        <td className={cn('table__cell', className)} {...tdProps}>\n            {children}\n        </td>\n    ),\n);\n","import * as React from 'react';\nimport cn from 'classnames';\n\ntype BaseRowProps = React.DetailedHTMLProps<\n    React.HTMLAttributes<HTMLTableRowElement>,\n    HTMLTableRowElement\n> & {\n    children: React.ReactNode;\n    className?: string;\n};\n\nexport const BaseRow = React.memo(\n    ({ children, className, ...trProps }: BaseRowProps) => (\n        <tr className={cn('table__row', className)} {...trProps}>\n            {children}\n        </tr>\n    ),\n);\n","import * as React from 'react';\nimport { Checkbox } from 'antd';\nimport cn from 'classnames';\n\nimport { TableColumn } from '../../columns';\nimport { BaseCell } from '../BaseCell';\nimport { BaseRow } from '../BaseRow';\n\ntype HeaderRowProps = {\n    indetermined?: boolean;\n    checked?: boolean;\n    columnsOrder: TableColumn[];\n};\n\nexport const everyRowId = 'every' as const;\n\nexport const HeaderRow = ({\n    columnsOrder,\n    indetermined,\n    checked,\n}: HeaderRowProps) => (\n    <BaseRow>\n        <BaseCell\n            className={cn('table__cell_sticky_top', 'table__cell_heading')}\n        >\n            <Checkbox\n                indeterminate={indetermined}\n                checked={checked}\n                name={everyRowId}\n                data-row-id={everyRowId}\n            />\n        </BaseCell>\n        {columnsOrder.map(({ title, dataIndex }) => (\n            <BaseCell\n                key={dataIndex}\n                scope=\"col\"\n                className={cn('table__cell_sticky_top', 'table__cell_heading')}\n            >\n                {title}\n            </BaseCell>\n        ))}\n    </BaseRow>\n);\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { createSelector, createStructuredSelector } from 'reselect';\nimport { Checkbox } from 'antd';\nimport cn from 'classnames';\n\nimport { Employee } from 'types/employee';\nimport { State } from 'store/state';\nimport { employeesByIdSelector } from 'store/selectors/employees';\n\nimport { TableColumn } from '../../columns';\nimport { BaseRow } from '../BaseRow';\nimport { BaseCell } from '../BaseCell';\n\ntype TableRowOwnProps = {\n    rowId: string;\n    columnsOrder: TableColumn[];\n    checked?: boolean;\n};\ntype TabeRowStateProps = {\n    rowData: Employee;\n};\ntype TableRowProps = TableRowOwnProps & TabeRowStateProps;\n\nconst TableRowComponent = ({\n    columnsOrder,\n    rowData,\n    checked,\n}: TableRowProps) => (\n    <BaseRow className={cn({ table__row_selected: checked })}>\n        <BaseCell>\n            <Checkbox\n                checked={checked}\n                name={rowData.id}\n                data-row-id={rowData.id}\n            />\n        </BaseCell>\n        {columnsOrder.map(({ dataIndex }) => (\n            <BaseCell key={dataIndex}>{rowData[dataIndex]}</BaseCell>\n        ))}\n    </BaseRow>\n);\n\nconst mapStateToProps = createStructuredSelector<\n    State,\n    TableRowOwnProps,\n    TabeRowStateProps\n>({\n    rowData: createSelector(\n        employeesByIdSelector,\n        (_: State, { rowId }: TableRowOwnProps) => rowId,\n        (dataById, rowId) => dataById[rowId],\n    ),\n});\nexport const TableRow = connect(() => mapStateToProps)(TableRowComponent);\n","import * as React from 'react';\nimport cn from 'classnames';\nimport { connect } from 'react-redux';\nimport { createSelector, createStructuredSelector } from 'reselect';\n\nimport { State } from 'store/state';\nimport { employeesByIdSelector } from 'store/selectors/employees';\n\nimport { BaseRow } from '../BaseRow';\nimport { BaseCell } from '../BaseCell';\n\ntype SummaryRowOwnProps = {\n    colSpan: number;\n    selected: string[];\n};\ntype SummaryRowStateProps = {\n    selectedNames: string[];\n};\ntype SummaryRowProps = SummaryRowOwnProps & SummaryRowStateProps;\n\nconst SummaryRowComponent = ({ colSpan, selectedNames }: SummaryRowProps) => (\n    <BaseRow>\n        <BaseCell\n            className={cn('table__cell_summary', 'table__cell_sticky_bottom')}\n        >\n            Пользователи:\n        </BaseCell>\n        <BaseCell\n            className={cn('table__cell_summary', 'table__cell_sticky_bottom')}\n            colSpan={colSpan}\n        >\n            {selectedNames.join(', ') || '≧☉_☉≦'}\n        </BaseCell>\n    </BaseRow>\n);\n\nconst mapStateToProps = createStructuredSelector<\n    State,\n    SummaryRowOwnProps,\n    SummaryRowStateProps\n>({\n    selectedNames: createSelector(\n        employeesByIdSelector,\n        (_: State, { selected }: SummaryRowOwnProps) => selected,\n        (dataById, selected) =>\n            selected.map((id) => dataById[id]?.name).filter(Boolean),\n    ),\n});\n\nexport const SummaryRow = connect(mapStateToProps)(SummaryRowComponent);\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\n\nimport { employeesOrderSelector } from 'store/selectors/employees';\nimport { State } from 'store/state';\n\nimport { columns, TableColumn } from './columns';\nimport { TableRow, HeaderRow, SummaryRow, everyRowId } from './components';\n\nimport './styles.css';\n\ntype TableProps = {\n    columnsOrder: TableColumn[];\n    rowsOrder: string[];\n};\n\nconst TableComponent = ({ columnsOrder, rowsOrder }: TableProps) => {\n    const [selected, setSelected] = React.useState<string[]>([]);\n\n    const handleClick = (event: React.MouseEvent) => {\n        const target = event.target as any;\n        const { tagName, dataset } = target;\n\n        if (tagName !== 'INPUT') {\n            return;\n        }\n\n        const rowId = dataset.rowId;\n        if (rowId === everyRowId) {\n            return handleClickEvery();\n        }\n\n        return handleClickRow(rowId);\n    };\n\n    const handleClickEvery = () => {\n        setSelected(selected.length !== rowsOrder.length ? [...rowsOrder] : []);\n    };\n\n    const handleClickRow = (rowId: string) => {\n        const idx = selected.indexOf(rowId);\n\n        if (idx !== -1) {\n            const without = [...selected];\n            without.splice(idx, 1);\n            return setSelected(without);\n        }\n\n        setSelected([...selected, rowId]);\n    };\n\n    return (\n        <table className=\"table\" onClick={handleClick}>\n            <thead>\n                <HeaderRow\n                    indetermined={\n                        selected.length !== 0 &&\n                        selected.length !== rowsOrder.length\n                    }\n                    checked={selected.length === rowsOrder.length}\n                    columnsOrder={columnsOrder}\n                />\n            </thead>\n            <tbody>\n                {rowsOrder.map((rowId) => (\n                    <TableRow\n                        key={rowId}\n                        rowId={rowId}\n                        columnsOrder={columnsOrder}\n                        checked={selected.includes(rowId)}\n                    />\n                ))}\n            </tbody>\n            <tfoot>\n                <SummaryRow colSpan={columnsOrder.length} selected={selected} />\n            </tfoot>\n        </table>\n    );\n};\n\nconst mapStateToProps = createStructuredSelector<State, TableProps>({\n    columnsOrder: () => columns,\n    rowsOrder: employeesOrderSelector,\n});\nexport const Table = connect(mapStateToProps)(TableComponent);\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { PageHeader, Result, Button, Spin, Typography } from 'antd';\n\nimport { State } from 'store/state';\nimport {\n    employeesLoadingSelector,\n    employeesErrorSelector,\n} from 'store/selectors/employees';\nimport { fetchEmployees } from 'store/actions/employees';\n\nimport { Table } from 'components/Table';\n\nimport './styles.css';\n\ntype PageStateProps = {\n    loading: boolean;\n    error: boolean;\n};\ntype PageDispatchProps = typeof mapDispatchToProps;\ntype PageProps = PageStateProps & PageDispatchProps;\n\nconst { Text } = Typography;\n\nconst PageComponent = ({ loading, error, getData }: PageProps) => {\n    React.useEffect(() => {\n        getData();\n    }, [getData]);\n\n    return (\n        <main className=\"page\">\n            <PageHeader className=\"page__header\" title=\"Список сотрудников\" />\n\n            <section className=\"page__table\">\n                {error && (\n                    <Result\n                        status=\"error\"\n                        title=\"Мы не смогли загрузить список сотрудников\"\n                        subTitle=\"Пожалуйста проверьте своё интернет-соединение\"\n                        extra={[\n                            <Button key=\"retry\" onClick={getData}>\n                                Попробовать ещё раз\n                            </Button>,\n                        ]}\n                    ></Result>\n                )}\n                {loading && (\n                    <div className=\"page__loading\">\n                        <div className=\"page__message\">\n                            <Text>Данные загружаются</Text>\n                            <br />\n                            <Text type=\"secondary\">\n                                Пожалуйста сохраняйте спокойствие (ᵔᴥᵔ)\n                            </Text>\n                        </div>\n                        <Spin />\n                    </div>\n                )}\n                {!loading && !error && <Table />}\n            </section>\n        </main>\n    );\n};\n\nconst mapStateToProps = createStructuredSelector<State, PageStateProps>({\n    loading: employeesLoadingSelector,\n    error: employeesErrorSelector,\n});\nconst mapDispatchToProps = {\n    getData: fetchEmployees,\n};\n\nexport const Page = connect(mapStateToProps, mapDispatchToProps)(PageComponent);\n","import * as React from 'react';\nimport { Provider } from 'react-redux';\nimport { configureStore } from 'store/index';\nimport { Page } from '../Page';\n\nconst store = configureStore();\n\nexport const App = () => (\n    <Provider store={store}>\n        <Page />\n    </Provider>\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { App } from './components';\nimport 'antd/dist/antd.css';\nimport './index.css';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}